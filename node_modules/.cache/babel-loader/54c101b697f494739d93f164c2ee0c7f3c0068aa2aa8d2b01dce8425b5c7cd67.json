{"ast":null,"code":"var _jsxFileName = \"/Users/Fernando_Andres_Poblete/Desktop/Programacion/Blockchain/bnbBootcamp/Tasks/hw9/soliditybootcamp/ethers-js/src/App.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport { ethers } from 'ethers';\nimport abi from './abi/abi.json';\nimport { getContractInfo, mintAmmount, transferAmount } from './helpers';\nimport { Form } from './components/Form';\nimport { ContractInformation } from './components/ContractInformation';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [contractObject, setContractObject] = useState({});\n  const [connected, setConnected] = useState(false);\n  const [contractInfo, setContractInfo] = useState({});\n  const [formValues, setFormValues] = useState({\n    mint: '',\n    transfer: {\n      from: '',\n      to: '',\n      value: ''\n    }\n  });\n  const [transactionHash, setTransactionHash] = useState(null);\n  const {\n    ethereum\n  } = window;\n  let contract = null;\n\n  // UseEffect on component mount\n  useEffect(() => {\n    if (ethereum) {\n      const address = '0x67efb6498193CaAaA13baD48c9e2DaC69dfd9b35';\n      const provider = new ethers.providers.Web3Provider(ethereum);\n      const signer = provider.getSigner();\n      contract = new ethers.Contract(address, abi, signer);\n      setContractObject(contract);\n\n      // Call getContractInfo to get the contract information using async await\n      getContractInfo(contract, setContractInfo);\n    }\n  }, []);\n\n  // Connect function\n  const onConnectButtonClick = () => {\n    if (!connected) {\n      ethereum.request({\n        method: 'eth_requestAccounts'\n      }).then(accounts => {\n        setConnected(true);\n      });\n    }\n  };\n\n  // Form submit\n  const onFormSubmit = async (e, formValues) => {\n    e.preventDefault();\n    let lastTransactionHash = null;\n    const {\n      mint,\n      transfer\n    } = formValues;\n    if (mint) {\n      // Call mint and save transaction hash\n      lastTransactionHash = await mintAmmount(mint, contractObject, ethereum.selectedAddress);\n      // Update amounts\n      setContractInfo({\n        ...contractInfo,\n        balanceOfAccount: Number(contractInfo.balanceOfAccount) + Number(mint),\n        totalSupply: Number(contractInfo.totalSupply) + Number(mint)\n      });\n      // Clear form\n      setFormValues({\n        mint: ''\n      });\n\n      // Set transaction hash\n      setTransactionHash(lastTransactionHash);\n      return;\n    }\n    if (transfer !== null && transfer !== void 0 && transfer.to && transfer !== null && transfer !== void 0 && transfer.value) {\n      console.log(transfer);\n      // Call transfer and save transaction hash\n      lastTransactionHash = await transferAmount(transfer.to, ethereum.selectedAddress, transfer.value, contractObject);\n\n      // Update amounts\n      setContractInfo({\n        ...contractInfo,\n        balanceOfAccount: Number(contractInfo.balanceOfAccount) - Number(transfer.value)\n      });\n\n      // Clear form\n      setFormValues({\n        trasnfer: {\n          to: '',\n          value: ''\n        }\n      });\n\n      // Set transaction hash\n      setTransactionHash(lastTransactionHash);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: contractInfo.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: onConnectButtonClick,\n      children: connected ? 'Connected' : 'Connect wallet'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), contractInfo && connected && /*#__PURE__*/_jsxDEV(ContractInformation, {\n      info: contractInfo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 37\n    }, this), connected && /*#__PURE__*/_jsxDEV(Form, {\n      contract: contract,\n      connected: connected,\n      onSubmit: onFormSubmit,\n      formValues: formValues,\n      setFormValues: setFormValues,\n      transactionHash: transactionHash\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"ZYc9LoBrQtatgyaK4ukcYzY9fsk=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useEffect","useState","ethers","abi","getContractInfo","mintAmmount","transferAmount","Form","ContractInformation","jsxDEV","_jsxDEV","App","_s","contractObject","setContractObject","connected","setConnected","contractInfo","setContractInfo","formValues","setFormValues","mint","transfer","from","to","value","transactionHash","setTransactionHash","ethereum","window","contract","address","provider","providers","Web3Provider","signer","getSigner","Contract","onConnectButtonClick","request","method","then","accounts","onFormSubmit","e","preventDefault","lastTransactionHash","selectedAddress","balanceOfAccount","Number","totalSupply","console","log","trasnfer","className","children","name","fileName","_jsxFileName","lineNumber","columnNumber","onClick","info","onSubmit","_c","$RefreshReg$"],"sources":["/Users/Fernando_Andres_Poblete/Desktop/Programacion/Blockchain/bnbBootcamp/Tasks/hw9/soliditybootcamp/ethers-js/src/App.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { ethers } from 'ethers';\nimport abi from './abi/abi.json';\nimport { getContractInfo, mintAmmount, transferAmount } from './helpers';\nimport { Form } from './components/Form';\nimport { ContractInformation } from './components/ContractInformation';\n\nfunction App() {\n  const [contractObject, setContractObject] = useState({});\n  const [connected, setConnected] = useState(false);\n  const [contractInfo, setContractInfo] = useState({});\n  const [formValues, setFormValues] = useState({ mint: '', transfer: { from: '', to: '', value: '' } });\n  const [transactionHash, setTransactionHash] = useState(null);\n  const { ethereum } = window;\n  let contract = null;\n\n  // UseEffect on component mount\n  useEffect(() => {\n    if (ethereum) {\n      const address = '0x67efb6498193CaAaA13baD48c9e2DaC69dfd9b35';\n      const provider = new ethers.providers.Web3Provider(ethereum);\n      const signer = provider.getSigner();\n      contract = new ethers.Contract(address, abi, signer);\n      setContractObject(contract);\n\n      // Call getContractInfo to get the contract information using async await\n      getContractInfo(contract, setContractInfo);\n    }\n  }, []);\n\n  // Connect function\n  const onConnectButtonClick = () => {\n    if (!connected) {\n      ethereum.request({ method: 'eth_requestAccounts' }).then(accounts => {\n        setConnected(true);\n      });\n    }\n  };\n\n  // Form submit\n  const onFormSubmit = async (e, formValues) => {\n    e.preventDefault();\n    let lastTransactionHash = null;\n    const { mint, transfer } = formValues;\n    if (mint) {\n      // Call mint and save transaction hash\n      lastTransactionHash = await mintAmmount(mint, contractObject, ethereum.selectedAddress);\n      // Update amounts\n      setContractInfo({\n        ...contractInfo,\n        balanceOfAccount: Number(contractInfo.balanceOfAccount) + Number(mint),\n        totalSupply: Number(contractInfo.totalSupply) + Number(mint),\n      });\n      // Clear form\n      setFormValues({ mint: '' });\n\n      // Set transaction hash\n      setTransactionHash(lastTransactionHash);\n      return;\n    }\n\n    if (transfer?.to && transfer?.value) {\n      console.log(transfer);\n      // Call transfer and save transaction hash\n      lastTransactionHash = await transferAmount(transfer.to, ethereum.selectedAddress, transfer.value, contractObject);\n\n      // Update amounts\n      setContractInfo({\n        ...contractInfo,\n        balanceOfAccount: Number(contractInfo.balanceOfAccount) - Number(transfer.value),\n      });\n\n      // Clear form\n      setFormValues({ trasnfer: { to: '', value: '' } });\n\n      // Set transaction hash\n      setTransactionHash(lastTransactionHash);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>{contractInfo.name}</h1>\n\n      {/* Connect Button */}\n      <button onClick={onConnectButtonClick}>{connected ? 'Connected' : 'Connect wallet'}</button>\n\n      {/* Information */}\n\n      {contractInfo && connected && <ContractInformation info={contractInfo} />}\n\n      {/* Form */}\n\n      {connected && (\n        <Form\n          contract={contract}\n          connected={connected}\n          onSubmit={onFormSubmit}\n          formValues={formValues}\n          setFormValues={setFormValues}\n          transactionHash={transactionHash}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}