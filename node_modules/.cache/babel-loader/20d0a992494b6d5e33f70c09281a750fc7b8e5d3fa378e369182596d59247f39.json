{"ast":null,"code":"var _jsxFileName = \"/Users/Fernando_Andres_Poblete/Desktop/Programacion/Blockchain/bnbBootcamp/Tasks/hw9/soliditybootcamp/ethers-js/src/App.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport { ethers } from 'ethers';\nimport abi from './abi/abi.json';\nimport { getContractInfo } from './helpers/getContractInfo';\nimport { Form } from './components/Form';\nimport { ContractInformation } from './components/ContractInformation';\nimport { mintAmmount } from './helpers/mintAmmount';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [contractObject, setContractObject] = useState({});\n  const [connected, setConnected] = useState(false);\n  const [contractInfo, setContractInfo] = useState({});\n  const {\n    ethereum\n  } = window;\n  let contract = null;\n\n  // UseEffect on component mount\n  useEffect(() => {\n    if (ethereum) {\n      const address = '0x67efb6498193CaAaA13baD48c9e2DaC69dfd9b35';\n      const provider = new ethers.providers.Web3Provider(ethereum);\n      const signer = provider.getSigner();\n      setContractObject(new ethers.Contract(address, abi, signer));\n\n      // Call getContractInfo to get the contract information using async await\n      getContractInfo(contract, setContractInfo);\n    }\n  }, []);\n\n  // Connect function\n  const onConnectButtonClick = () => {\n    if (!connected) {\n      ethereum.request({\n        method: 'eth_requestAccounts'\n      }).then(accounts => {\n        setConnected(true);\n      });\n    }\n  };\n\n  // Form submit\n  const onFormSubmit = (e, formValues) => {\n    e.preventDefault();\n    const {\n      mint\n    } = formValues;\n    if (mint) mintAmmount(mint, contractObject);\n    console.log(formValues);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: contractInfo.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: onConnectButtonClick,\n      children: connected ? 'Connected' : 'Connect wallet'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), contractInfo && connected && /*#__PURE__*/_jsxDEV(ContractInformation, {\n      info: contractInfo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 37\n    }, this), connected && /*#__PURE__*/_jsxDEV(Form, {\n      contract: contract,\n      connected: connected,\n      onSubmit: onFormSubmit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"5KGfuUZTcX8IZKbAxeWQRS46CGg=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useEffect","useState","ethers","abi","getContractInfo","Form","ContractInformation","mintAmmount","jsxDEV","_jsxDEV","App","_s","contractObject","setContractObject","connected","setConnected","contractInfo","setContractInfo","ethereum","window","contract","address","provider","providers","Web3Provider","signer","getSigner","Contract","onConnectButtonClick","request","method","then","accounts","onFormSubmit","e","formValues","preventDefault","mint","console","log","className","children","name","fileName","_jsxFileName","lineNumber","columnNumber","onClick","info","onSubmit","_c","$RefreshReg$"],"sources":["/Users/Fernando_Andres_Poblete/Desktop/Programacion/Blockchain/bnbBootcamp/Tasks/hw9/soliditybootcamp/ethers-js/src/App.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { ethers } from 'ethers';\nimport abi from './abi/abi.json';\nimport { getContractInfo } from './helpers/getContractInfo';\nimport { Form } from './components/Form';\nimport { ContractInformation } from './components/ContractInformation';\nimport { mintAmmount } from './helpers/mintAmmount';\n\nfunction App() {\n  const [contractObject, setContractObject] = useState({});\n  const [connected, setConnected] = useState(false);\n  const [contractInfo, setContractInfo] = useState({});\n  const { ethereum } = window;\n  let contract = null;\n\n  // UseEffect on component mount\n  useEffect(() => {\n    if (ethereum) {\n      const address = '0x67efb6498193CaAaA13baD48c9e2DaC69dfd9b35';\n      const provider = new ethers.providers.Web3Provider(ethereum);\n      const signer = provider.getSigner();\n      setContractObject(new ethers.Contract(address, abi, signer));\n\n      // Call getContractInfo to get the contract information using async await\n      getContractInfo(contract, setContractInfo);\n    }\n  }, []);\n\n  // Connect function\n  const onConnectButtonClick = () => {\n    if (!connected) {\n      ethereum.request({ method: 'eth_requestAccounts' }).then(accounts => {\n        setConnected(true);\n      });\n    }\n  };\n\n  // Form submit\n  const onFormSubmit = (e, formValues) => {\n    e.preventDefault();\n    const { mint } = formValues;\n\n    if (mint) mintAmmount(mint, contractObject);\n    console.log(formValues);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>{contractInfo.name}</h1>\n\n      {/* Connect Button */}\n      <button onClick={onConnectButtonClick}>{connected ? 'Connected' : 'Connect wallet'}</button>\n\n      {/* Information */}\n\n      {contractInfo && connected && <ContractInformation info={contractInfo} />}\n\n      {/* Form */}\n\n      {connected && (\n        <Form\n          contract={contract}\n          connected={connected}\n          onSubmit={onFormSubmit}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}