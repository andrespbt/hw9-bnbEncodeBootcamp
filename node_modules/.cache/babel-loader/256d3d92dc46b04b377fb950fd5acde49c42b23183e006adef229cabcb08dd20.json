{"ast":null,"code":"var _jsxFileName = \"/Users/Fernando_Andres_Poblete/Desktop/Programacion/Blockchain/bnbBootcamp/Tasks/hw9/soliditybootcamp/ethers-js/src/App.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport { ethers } from 'ethers';\nimport abi from './abi/abi.json';\nimport { getContractInfo } from './helpers/getContractInfo';\nimport { Form } from './components/Form';\nimport { ContractInformation } from './components/ContractInformation';\nimport { mintAmmount } from './helpers/mintAmmount';\nimport { burnAmount } from './helpers/burnAmount';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [contractObject, setContractObject] = useState({});\n  const [connected, setConnected] = useState(false);\n  const [contractInfo, setContractInfo] = useState({});\n  const [formValues, setFormValues] = useState({\n    mint: '',\n    burn: ''\n  });\n  const [transactionHash, setTransactionHash] = useState(null);\n  const {\n    ethereum\n  } = window;\n  let contract = null;\n\n  // UseEffect on component mount\n  useEffect(() => {\n    if (ethereum) {\n      const address = '0x67efb6498193CaAaA13baD48c9e2DaC69dfd9b35';\n      const provider = new ethers.providers.Web3Provider(ethereum);\n      const signer = provider.getSigner();\n      contract = new ethers.Contract(address, abi, signer);\n      setContractObject(contract);\n\n      // Call getContractInfo to get the contract information using async await\n      getContractInfo(contract, setContractInfo);\n    }\n  }, []);\n\n  // Connect function\n  const onConnectButtonClick = () => {\n    if (!connected) {\n      ethereum.request({\n        method: 'eth_requestAccounts'\n      }).then(accounts => {\n        setConnected(true);\n      });\n    }\n  };\n\n  // Form submit\n  const onFormSubmit = async (e, formValues) => {\n    e.preventDefault();\n    let lastTransactionHash = null;\n    const {\n      mint,\n      burn\n    } = formValues;\n    if (mint) {\n      // Call mint and save transaction hash\n      lastTransactionHash = await mintAmmount(mint, contractObject, ethereum.selectedAddress);\n      // Update amounts\n      setContractInfo({\n        ...contractInfo,\n        balanceOfAccount: Number(contractInfo.balanceOfAccount) + Number(mint),\n        totalSupply: Number(contractInfo.totalSupply) + Number(mint)\n      });\n      // Clear form\n      setFormValues({\n        mint: ''\n      });\n\n      // Set transaction hash\n      setTransactionHash(lastTransactionHash);\n    }\n    if (burn) {\n      // Call burn and save transaction hash\n      lastTransactionHash = await burnAmount(burn, contractObject, ethereum.selectedAddress);\n\n      // Update amounts\n      setContractInfo({\n        ...contractInfo,\n        balanceOfAccount: Number(contractInfo.balanceOfAccount) - Number(burn)\n      });\n\n      // Clear form\n      setFormValues({\n        burn: ''\n      });\n\n      // Set transaction hash\n      setTransactionHash(lastTransactionHash);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: contractInfo.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: onConnectButtonClick,\n      children: connected ? 'Connected' : 'Connect wallet'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), contractInfo && connected && /*#__PURE__*/_jsxDEV(ContractInformation, {\n      info: contractInfo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 37\n    }, this), connected && /*#__PURE__*/_jsxDEV(Form, {\n      contract: contract,\n      connected: connected,\n      onSubmit: onFormSubmit,\n      formValues: formValues,\n      setFormValues: setFormValues,\n      transactionHash: transactionHash\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"dwjXvh3zp7Il8V5uytk18HcZTOE=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useEffect","useState","ethers","abi","getContractInfo","Form","ContractInformation","mintAmmount","burnAmount","jsxDEV","_jsxDEV","App","_s","contractObject","setContractObject","connected","setConnected","contractInfo","setContractInfo","formValues","setFormValues","mint","burn","transactionHash","setTransactionHash","ethereum","window","contract","address","provider","providers","Web3Provider","signer","getSigner","Contract","onConnectButtonClick","request","method","then","accounts","onFormSubmit","e","preventDefault","lastTransactionHash","selectedAddress","balanceOfAccount","Number","totalSupply","className","children","name","fileName","_jsxFileName","lineNumber","columnNumber","onClick","info","onSubmit","_c","$RefreshReg$"],"sources":["/Users/Fernando_Andres_Poblete/Desktop/Programacion/Blockchain/bnbBootcamp/Tasks/hw9/soliditybootcamp/ethers-js/src/App.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { ethers } from 'ethers';\nimport abi from './abi/abi.json';\nimport { getContractInfo } from './helpers/getContractInfo';\nimport { Form } from './components/Form';\nimport { ContractInformation } from './components/ContractInformation';\nimport { mintAmmount } from './helpers/mintAmmount';\nimport { burnAmount } from './helpers/burnAmount';\n\nfunction App() {\n  const [contractObject, setContractObject] = useState({});\n  const [connected, setConnected] = useState(false);\n  const [contractInfo, setContractInfo] = useState({});\n  const [formValues, setFormValues] = useState({ mint: '', burn: '' });\n  const [transactionHash, setTransactionHash] = useState(null);\n  const { ethereum } = window;\n  let contract = null;\n\n  // UseEffect on component mount\n  useEffect(() => {\n    if (ethereum) {\n      const address = '0x67efb6498193CaAaA13baD48c9e2DaC69dfd9b35';\n      const provider = new ethers.providers.Web3Provider(ethereum);\n      const signer = provider.getSigner();\n      contract = new ethers.Contract(address, abi, signer);\n      setContractObject(contract);\n\n      // Call getContractInfo to get the contract information using async await\n      getContractInfo(contract, setContractInfo);\n    }\n  }, []);\n\n  // Connect function\n  const onConnectButtonClick = () => {\n    if (!connected) {\n      ethereum.request({ method: 'eth_requestAccounts' }).then(accounts => {\n        setConnected(true);\n      });\n    }\n  };\n\n  // Form submit\n  const onFormSubmit = async (e, formValues) => {\n    e.preventDefault();\n    let lastTransactionHash = null;\n    const { mint, burn } = formValues;\n    if (mint) {\n      // Call mint and save transaction hash\n      lastTransactionHash = await mintAmmount(mint, contractObject, ethereum.selectedAddress);\n      // Update amounts\n      setContractInfo({\n        ...contractInfo,\n        balanceOfAccount: Number(contractInfo.balanceOfAccount) + Number(mint),\n        totalSupply: Number(contractInfo.totalSupply) + Number(mint),\n      });\n      // Clear form\n      setFormValues({ mint: '' });\n\n      // Set transaction hash\n      setTransactionHash(lastTransactionHash);\n    }\n\n    if (burn) {\n      // Call burn and save transaction hash\n      lastTransactionHash = await burnAmount(burn, contractObject, ethereum.selectedAddress);\n\n      // Update amounts\n      setContractInfo({\n        ...contractInfo,\n        balanceOfAccount: Number(contractInfo.balanceOfAccount) - Number(burn),\n      });\n\n      // Clear form\n      setFormValues({ burn: '' });\n\n      // Set transaction hash\n      setTransactionHash(lastTransactionHash);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>{contractInfo.name}</h1>\n\n      {/* Connect Button */}\n      <button onClick={onConnectButtonClick}>{connected ? 'Connected' : 'Connect wallet'}</button>\n\n      {/* Information */}\n\n      {contractInfo && connected && <ContractInformation info={contractInfo} />}\n\n      {/* Form */}\n\n      {connected && (\n        <Form\n          contract={contract}\n          connected={connected}\n          onSubmit={onFormSubmit}\n          formValues={formValues}\n          setFormValues={setFormValues}\n          transactionHash={transactionHash}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,MAAM,QAAQ,QAAQ;AAC/B,OAAOC,GAAG,MAAM,gBAAgB;AAChC,SAASC,eAAe,QAAQ,2BAA2B;AAC3D,SAASC,IAAI,QAAQ,mBAAmB;AACxC,SAASC,mBAAmB,QAAQ,kCAAkC;AACtE,SAASC,WAAW,QAAQ,uBAAuB;AACnD,SAASC,UAAU,QAAQ,sBAAsB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElD,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAGb,QAAQ,CAAC,CAAC,CAAC,CAAC;EACxD,MAAM,CAACc,SAAS,EAAEC,YAAY,CAAC,GAAGf,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACgB,YAAY,EAAEC,eAAe,CAAC,GAAGjB,QAAQ,CAAC,CAAC,CAAC,CAAC;EACpD,MAAM,CAACkB,UAAU,EAAEC,aAAa,CAAC,GAAGnB,QAAQ,CAAC;IAAEoB,IAAI,EAAE,EAAE;IAAEC,IAAI,EAAE;EAAG,CAAC,CAAC;EACpE,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGvB,QAAQ,CAAC,IAAI,CAAC;EAC5D,MAAM;IAAEwB;EAAS,CAAC,GAAGC,MAAM;EAC3B,IAAIC,QAAQ,GAAG,IAAI;;EAEnB;EACA3B,SAAS,CAAC,MAAM;IACd,IAAIyB,QAAQ,EAAE;MACZ,MAAMG,OAAO,GAAG,4CAA4C;MAC5D,MAAMC,QAAQ,GAAG,IAAI3B,MAAM,CAAC4B,SAAS,CAACC,YAAY,CAACN,QAAQ,CAAC;MAC5D,MAAMO,MAAM,GAAGH,QAAQ,CAACI,SAAS,EAAE;MACnCN,QAAQ,GAAG,IAAIzB,MAAM,CAACgC,QAAQ,CAACN,OAAO,EAAEzB,GAAG,EAAE6B,MAAM,CAAC;MACpDlB,iBAAiB,CAACa,QAAQ,CAAC;;MAE3B;MACAvB,eAAe,CAACuB,QAAQ,EAAET,eAAe,CAAC;IAC5C;EACF,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMiB,oBAAoB,GAAGA,CAAA,KAAM;IACjC,IAAI,CAACpB,SAAS,EAAE;MACdU,QAAQ,CAACW,OAAO,CAAC;QAAEC,MAAM,EAAE;MAAsB,CAAC,CAAC,CAACC,IAAI,CAACC,QAAQ,IAAI;QACnEvB,YAAY,CAAC,IAAI,CAAC;MACpB,CAAC,CAAC;IACJ;EACF,CAAC;;EAED;EACA,MAAMwB,YAAY,GAAG,MAAAA,CAAOC,CAAC,EAAEtB,UAAU,KAAK;IAC5CsB,CAAC,CAACC,cAAc,EAAE;IAClB,IAAIC,mBAAmB,GAAG,IAAI;IAC9B,MAAM;MAAEtB,IAAI;MAAEC;IAAK,CAAC,GAAGH,UAAU;IACjC,IAAIE,IAAI,EAAE;MACR;MACAsB,mBAAmB,GAAG,MAAMpC,WAAW,CAACc,IAAI,EAAER,cAAc,EAAEY,QAAQ,CAACmB,eAAe,CAAC;MACvF;MACA1B,eAAe,CAAC;QACd,GAAGD,YAAY;QACf4B,gBAAgB,EAAEC,MAAM,CAAC7B,YAAY,CAAC4B,gBAAgB,CAAC,GAAGC,MAAM,CAACzB,IAAI,CAAC;QACtE0B,WAAW,EAAED,MAAM,CAAC7B,YAAY,CAAC8B,WAAW,CAAC,GAAGD,MAAM,CAACzB,IAAI;MAC7D,CAAC,CAAC;MACF;MACAD,aAAa,CAAC;QAAEC,IAAI,EAAE;MAAG,CAAC,CAAC;;MAE3B;MACAG,kBAAkB,CAACmB,mBAAmB,CAAC;IACzC;IAEA,IAAIrB,IAAI,EAAE;MACR;MACAqB,mBAAmB,GAAG,MAAMnC,UAAU,CAACc,IAAI,EAAET,cAAc,EAAEY,QAAQ,CAACmB,eAAe,CAAC;;MAEtF;MACA1B,eAAe,CAAC;QACd,GAAGD,YAAY;QACf4B,gBAAgB,EAAEC,MAAM,CAAC7B,YAAY,CAAC4B,gBAAgB,CAAC,GAAGC,MAAM,CAACxB,IAAI;MACvE,CAAC,CAAC;;MAEF;MACAF,aAAa,CAAC;QAAEE,IAAI,EAAE;MAAG,CAAC,CAAC;;MAE3B;MACAE,kBAAkB,CAACmB,mBAAmB,CAAC;IACzC;EACF,CAAC;EAED,oBACEjC,OAAA;IAAKsC,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAClBvC,OAAA;MAAAuC,QAAA,EAAKhC,YAAY,CAACiC;IAAI;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAM,eAG5B5C,OAAA;MAAQ6C,OAAO,EAAEpB,oBAAqB;MAAAc,QAAA,EAAElC,SAAS,GAAG,WAAW,GAAG;IAAgB;MAAAoC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAU,EAI3FrC,YAAY,IAAIF,SAAS,iBAAIL,OAAA,CAACJ,mBAAmB;MAACkD,IAAI,EAAEvC;IAAa;MAAAkC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAG,EAIxEvC,SAAS,iBACRL,OAAA,CAACL,IAAI;MACHsB,QAAQ,EAAEA,QAAS;MACnBZ,SAAS,EAAEA,SAAU;MACrB0C,QAAQ,EAAEjB,YAAa;MACvBrB,UAAU,EAAEA,UAAW;MACvBC,aAAa,EAAEA,aAAc;MAC7BG,eAAe,EAAEA;IAAgB;MAAA4B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAEpC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACG;AAEV;AAAC1C,EAAA,CAhGQD,GAAG;AAAA+C,EAAA,GAAH/C,GAAG;AAkGZ,eAAeA,GAAG;AAAC,IAAA+C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}