{"ast":null,"code":"var _jsxFileName = \"/Users/Fernando_Andres_Poblete/Desktop/Programacion/Blockchain/bnbBootcamp/Tasks/hw9/soliditybootcamp/ethers-js/src/App.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport { ethers } from 'ethers';\nimport abi from './abi/abi.json';\nimport { getContractInfo } from './helpers/getContractInfo';\nimport { Form } from './components/Form';\nimport { ContractInformation } from './components/ContractInformation';\nimport { mintAmmount } from './helpers/mintAmmount';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [contractObject, setContractObject] = useState({});\n  const [connected, setConnected] = useState(false);\n  const [contractInfo, setContractInfo] = useState({});\n  const [formValues, setFormValues] = useState({\n    mint: ''\n  });\n  const {\n    ethereum\n  } = window;\n  let contract = null;\n\n  // UseEffect on component mount\n  useEffect(() => {\n    if (ethereum) {\n      const address = '0x67efb6498193CaAaA13baD48c9e2DaC69dfd9b35';\n      const provider = new ethers.providers.Web3Provider(ethereum);\n      const signer = provider.getSigner();\n      contract = new ethers.Contract(address, abi, signer);\n      setContractObject(contract);\n\n      // Call getContractInfo to get the contract information using async await\n      getContractInfo(contract, setContractInfo);\n    }\n  }, []);\n\n  // Connect function\n  const onConnectButtonClick = () => {\n    if (!connected) {\n      ethereum.request({\n        method: 'eth_requestAccounts'\n      }).then(accounts => {\n        setConnected(true);\n      });\n    }\n  };\n\n  // Form submit\n  const onFormSubmit = async (e, formValues) => {\n    e.preventDefault();\n    let transactionHash = null;\n    const {\n      mint\n    } = formValues;\n    if (mint) {\n      // Call mint and save transaction hash\n      transactionHash = await mintAmmount(mint, contractObject, ethereum.selectedAddress);\n      // Update amounts\n      setContractInfo({\n        ...contractInfo,\n        balanceOfAccount: Number(contractInfo.balanceOfAccount) + Number(mint),\n        totalSupply: Number(contractInfo.totalSupply) + Number(mint)\n      });\n      // Clear form\n      setFormValues({\n        mint: ''\n      });\n    }\n    console.log(transactionHash);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: contractInfo.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: onConnectButtonClick,\n      children: connected ? 'Connected' : 'Connect wallet'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), contractInfo && connected && /*#__PURE__*/_jsxDEV(ContractInformation, {\n      info: contractInfo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 37\n    }, this), connected && /*#__PURE__*/_jsxDEV(Form, {\n      contract: contract,\n      connected: connected,\n      onSubmit: onFormSubmit,\n      formValues: formValues,\n      setFormValues: setFormValues\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"fI0khIXCna2r6X7chqePJ5QutsU=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useEffect","useState","ethers","abi","getContractInfo","Form","ContractInformation","mintAmmount","jsxDEV","_jsxDEV","App","_s","contractObject","setContractObject","connected","setConnected","contractInfo","setContractInfo","formValues","setFormValues","mint","ethereum","window","contract","address","provider","providers","Web3Provider","signer","getSigner","Contract","onConnectButtonClick","request","method","then","accounts","onFormSubmit","e","preventDefault","transactionHash","selectedAddress","balanceOfAccount","Number","totalSupply","console","log","className","children","name","fileName","_jsxFileName","lineNumber","columnNumber","onClick","info","onSubmit","_c","$RefreshReg$"],"sources":["/Users/Fernando_Andres_Poblete/Desktop/Programacion/Blockchain/bnbBootcamp/Tasks/hw9/soliditybootcamp/ethers-js/src/App.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { ethers } from 'ethers';\nimport abi from './abi/abi.json';\nimport { getContractInfo } from './helpers/getContractInfo';\nimport { Form } from './components/Form';\nimport { ContractInformation } from './components/ContractInformation';\nimport { mintAmmount } from './helpers/mintAmmount';\n\nfunction App() {\n  const [contractObject, setContractObject] = useState({});\n  const [connected, setConnected] = useState(false);\n  const [contractInfo, setContractInfo] = useState({});\n  const [formValues, setFormValues] = useState({ mint: '' });\n  const { ethereum } = window;\n  let contract = null;\n\n  // UseEffect on component mount\n  useEffect(() => {\n    if (ethereum) {\n      const address = '0x67efb6498193CaAaA13baD48c9e2DaC69dfd9b35';\n      const provider = new ethers.providers.Web3Provider(ethereum);\n      const signer = provider.getSigner();\n      contract = new ethers.Contract(address, abi, signer);\n      setContractObject(contract);\n\n      // Call getContractInfo to get the contract information using async await\n      getContractInfo(contract, setContractInfo);\n    }\n  }, []);\n\n  // Connect function\n  const onConnectButtonClick = () => {\n    if (!connected) {\n      ethereum.request({ method: 'eth_requestAccounts' }).then(accounts => {\n        setConnected(true);\n      });\n    }\n  };\n\n  // Form submit\n  const onFormSubmit = async (e, formValues) => {\n    e.preventDefault();\n    let transactionHash = null;\n    const { mint } = formValues;\n    if (mint) {\n      // Call mint and save transaction hash\n      transactionHash = await mintAmmount(mint, contractObject, ethereum.selectedAddress);\n      // Update amounts\n      setContractInfo({\n        ...contractInfo,\n        balanceOfAccount: Number(contractInfo.balanceOfAccount) + Number(mint),\n        totalSupply: Number(contractInfo.totalSupply) + Number(mint),\n      });\n      // Clear form\n      setFormValues({ mint: '' });\n    }\n    console.log(transactionHash);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>{contractInfo.name}</h1>\n\n      {/* Connect Button */}\n      <button onClick={onConnectButtonClick}>{connected ? 'Connected' : 'Connect wallet'}</button>\n\n      {/* Information */}\n\n      {contractInfo && connected && <ContractInformation info={contractInfo} />}\n\n      {/* Form */}\n\n      {connected && (\n        <Form\n          contract={contract}\n          connected={connected}\n          onSubmit={onFormSubmit}\n          formValues={formValues}\n          setFormValues={setFormValues}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}